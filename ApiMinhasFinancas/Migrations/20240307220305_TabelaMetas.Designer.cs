// <auto-generated />
using System;
using ApiMinhasFinancas.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ApiMinhasFinancas.Migrations
{
    [DbContext(typeof(MinhasFinancasContext))]
    [Migration("20240307220305_TabelaMetas")]
    partial class TabelaMetas
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ApiMinhasFinancas.Models.Comprovantes", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("CaminhoArquivo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TipoComprovante")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TituloArquivo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ComprovantesDB");
                });

            modelBuilder.Entity("ApiMinhasFinancas.Models.Documentos", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("CodigoMeta")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DataDocumento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NumeroDocumento")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("QtdParcelas")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Valor")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("DocumentosDB");
                });

            modelBuilder.Entity("ApiMinhasFinancas.Models.FormasPagamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Valor")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("FormasPgtoDB");
                });

            modelBuilder.Entity("ApiMinhasFinancas.Models.Metas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataInsercao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataPrevisao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Valor")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("MetasDB");
                });

            modelBuilder.Entity("ApiMinhasFinancas.Models.TipoContas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("NomeConta")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("TipoContasDB");
                });

            modelBuilder.Entity("ApiMinhasFinancas.Models.Transferencias", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ContaDestino")
                        .HasColumnType("integer");

                    b.Property<int>("ContaOrigem")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DataTransferencia")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Valor")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("TransferenciasDB");
                });

            modelBuilder.Entity("ApiMinhasFinancas.Models.Usuarios", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UsuariosDB");
                });

            modelBuilder.Entity("ApiMinhasFinancas.Models.Comprovantes", b =>
                {
                    b.HasOne("ApiMinhasFinancas.Models.Documentos", "FK_Documento")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FK_Documento");
                });

            modelBuilder.Entity("ApiMinhasFinancas.Models.Documentos", b =>
                {
                    b.HasOne("ApiMinhasFinancas.Models.FormasPagamento", "Fk_FormaPgto")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiMinhasFinancas.Models.TipoContas", "Fk_Tipoconta")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiMinhasFinancas.Models.Usuarios", "Fk_usuario")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fk_FormaPgto");

                    b.Navigation("Fk_Tipoconta");

                    b.Navigation("Fk_usuario");
                });
#pragma warning restore 612, 618
        }
    }
}
